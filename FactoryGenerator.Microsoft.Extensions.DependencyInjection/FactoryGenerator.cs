using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace FactoryGenerator.Microsoft.Extensions.DependencyInjection;

[Generator]
public class FactoryGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context.SyntaxProvider
            .CreateSyntaxProvider(
                static (sn, _) => sn is TypeDeclarationSyntax tds && tds.HasTargetAttribute(),
                static (ctx, _) => (TypeDeclarationSyntax)ctx.Node)
            .Where(static tds => tds is not null);

        context.RegisterSourceOutput(
            context.CompilationProvider.Combine(provider.Collect()),
            static (ctx, t) => GenerateCode(ctx, t.Left, t.Right));
    }

    private static void GenerateCode(
        SourceProductionContext context,
        Compilation compilation,
        ImmutableArray<TypeDeclarationSyntax> classOrRecordDeclarations)
    {
        if (classOrRecordDeclarations.Length == 0)
            return;

        foreach (var classDeclarationSyntax in classOrRecordDeclarations)
        {
            var semanticModel = compilation.GetSemanticModel(classDeclarationSyntax.SyntaxTree);
            if (semanticModel.GetDeclaredSymbol(classDeclarationSyntax) is not INamedTypeSymbol classSymbol)
                continue;

            var namespaceName = classSymbol.ContainingNamespace.ToDisplayString();

            var className = classSymbol.Name;

            foreach (var attributeData in classSymbol.GetAttributes())
            {
                if (attributeData.AttributeClass == null)
                    continue;

                var attributeTypes = attributeData.AttributeClass.TypeArguments;

                var constructor = classSymbol.Constructors.FirstOrDefault();

                var dependencies = constructor?.Parameters
                    .Select((m, index) =>
                        new Dependency(
                            GetKind(m, attributeTypes),
                            ToDisplayString(m.Type),
                            $"dependency{index}", m.Type))
                    .ToArray() ?? [];

                var model = new Model(dependencies, className, namespaceName);

                View(context, model);
            }
        }
    }

    private static DependencyKind GetKind(
        IParameterSymbol constructorParameter,
        ImmutableArray<ITypeSymbol> factoryMethodParameterDependencies)
    {
        return factoryMethodParameterDependencies.Any(d =>
            SymbolEqualityComparer.Default.Equals(d, constructorParameter.Type))
            ? DependencyKind.MethodParameter
            : DependencyKind.Ctor;
    }

    private static void View(SourceProductionContext context, Model model)
    {
        var methodParameterDependencies = model.Dependencies
            .Where(m => m.Kind == DependencyKind.MethodParameter).ToArray();

        var ctorDependencies = model.Dependencies.Where(m => m.Kind == DependencyKind.Ctor).ToArray();

        var iFactoryGenericArguments = methodParameterDependencies
            .Select(d => d.FullTypeName)
            .Append($"{model.NamespaceName}.{model.ClassName}")
            .JoinToString();

        var fields = ctorDependencies
            .Select(d => $"{d.FullTypeName} {d.TokenName};")
            .JoinToString("\n    ");

        var factoryCtorParameters = ctorDependencies
            .Select(d => $"{d.FullTypeName} {d.TokenName}")
            .JoinToString();

        var factoryTypeName =
            $"{methodParameterDependencies.Select(d => d.RoslynType.Name).JoinToString("")}{model.ClassName}Factory";

        var assignments = ctorDependencies
            .Select(d => $"this.{d.TokenName} = {d.TokenName};")
            .JoinToString("\n        ");

        var methodParameters = methodParameterDependencies
            .Select(d => $"{d.FullTypeName} {d.TokenName}")
            .JoinToString();

        var ctorParameters = model.Dependencies.Select(d => d.TokenName)
            .JoinToString();

        var fullClassName = model.NamespaceName + "." + model.ClassName;

        var code =
            $$"""
              // <auto-generated/>

              using FactoryGenerator.Abstractions;

              namespace {{model.NamespaceName}};

              public sealed class {{factoryTypeName}} : FactoryGenerator.Abstractions.IFactory<{{iFactoryGenericArguments}}>
              {
                  {{fields}}
              
                  public {{factoryTypeName}}({{factoryCtorParameters}})
                  {
                      {{assignments}}
                  }
              
                  public {{fullClassName}} Create({{methodParameters}})
                  {
                      return new {{fullClassName}}({{ctorParameters}});
                  }
              }
              """;

        context.AddSource($"{model.NamespaceName}.{factoryTypeName}.g.cs", SourceText.From(code, Encoding.UTF8));
    }

    private static string ToDisplayString(ITypeSymbol p)
    {
        return p.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
    }
}