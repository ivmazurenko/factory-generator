using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace FactoryGenerator.Microsoft.Extensions.DependencyInjection;

[Generator]
public class FactoryGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context.SyntaxProvider
            .CreateSyntaxProvider(
                static (sn, _) => sn is TypeDeclarationSyntax tds && tds.HasTargetAttribute(),
                static (ctx, _) => (TypeDeclarationSyntax)ctx.Node)
            .Where(static tds => tds is not null);

        context.RegisterSourceOutput(
            context.CompilationProvider.Combine(provider.Collect()),
            static (ctx, t) => GenerateCode(ctx, t.Left, t.Right));
    }

    private static void GenerateCode(
        SourceProductionContext context,
        Compilation compilation,
        ImmutableArray<TypeDeclarationSyntax> classOrRecordDeclarations)
    {
        if (classOrRecordDeclarations.Length == 0)
            return;

        List<Model> allModels = new List<Model>();

        foreach (var classDeclarationSyntax in classOrRecordDeclarations)
        {
            var semanticModel = compilation.GetSemanticModel(classDeclarationSyntax.SyntaxTree);
            if (semanticModel.GetDeclaredSymbol(classDeclarationSyntax) is not INamedTypeSymbol classSymbol)
                continue;

            var models = classSymbol.GetAttributes()
                .Where(a => a.AttributeClass != null)
                .Select(attributeData => new Model(
                    classSymbol.Constructors.FirstOrDefault()?.Parameters
                        .Select((m, index) =>
                            new Dependency(
                                GetKind(m, attributeData.AttributeClass!.TypeArguments),
                                ToDisplayString(m.Type),
                                $"dependency{index}",
                                m.Type))
                        .ToArray() ?? [],
                    classSymbol.Name,
                    classSymbol.ContainingNamespace.ToDisplayString()
                )).ToArray();

            allModels.AddRange(models);

            foreach (var model in models)
            {
                RenderFactory(context, model);
            }
        }

        RenderExtensionMethod(context, allModels);
    }

    private static void RenderExtensionMethod(SourceProductionContext context, List<Model> models)
    {
        var registrations = models.Select(m =>
            $$"""self.AddTransient<{{m.FullInterfaceTypeName}}, {{m.NamespaceName}}.{{m.FactoryTypeName}}>();"""
        ).JoinToString("\n        ");

        var code =
            $$"""
              // <auto-generated/>
              using FactoryGenerator.Abstractions;
              using Microsoft.Extensions.DependencyInjection;

              namespace FactoryGenerator.Microsoft.Extensions.DependencyInjection;

              public static class ServiceCollectionExtensions
              {
                  public static IServiceCollection RegisterGeneratedFactories(this IServiceCollection self)
                  {
                      {{registrations}}
              
                      return self;
                  }
              }
              """;

        context.AddSource("FactoryGenerator.Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.g.cs",
            SourceText.From(code, Encoding.UTF8));
    }

    private static void RenderFactory(SourceProductionContext context, Model model)
    {
        var methodParameterDependencies = model.Dependencies
            .Where(m => m.Kind == DependencyKind.MethodParameter).ToArray();

        var ctorDependencies = model.Dependencies.Where(m => m.Kind == DependencyKind.Ctor).ToArray();

        var fields = ctorDependencies
            .Select(d => $"{d.FullTypeName} {d.TokenName};")
            .JoinToString("\n    ");

        var factoryCtorParameters = ctorDependencies
            .Select(d => $"{d.FullTypeName} {d.TokenName}")
            .JoinToString();

        var assignments = ctorDependencies
            .Select(d => $"this.{d.TokenName} = {d.TokenName};")
            .JoinToString("\n        ");

        var methodParameters = methodParameterDependencies
            .Select(d => $"{d.FullTypeName} {d.TokenName}")
            .JoinToString();

        var ctorParameters = model.Dependencies.Select(d => d.TokenName)
            .JoinToString();

        var fullClassName = model.NamespaceName + "." + model.ClassName;

        var code =
            $$"""
              // <auto-generated/>

              using FactoryGenerator.Abstractions;

              namespace {{model.NamespaceName}};

              public sealed class {{model.FactoryTypeName}} : {{model.FullInterfaceTypeName}}
              {
                  {{fields}}
              
                  public {{model.FactoryTypeName}}({{factoryCtorParameters}})
                  {
                      {{assignments}}
                  }
              
                  public {{fullClassName}} Create({{methodParameters}})
                  {
                      return new {{fullClassName}}({{ctorParameters}});
                  }
              }
              """;

        context.AddSource($"{model.NamespaceName}.{model.FactoryTypeName}.g.cs", SourceText.From(code, Encoding.UTF8));
    }

    private static string ToDisplayString(ITypeSymbol p)
    {
        return p.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
    }

    private static DependencyKind GetKind(
        IParameterSymbol constructorParameter,
        ImmutableArray<ITypeSymbol> factoryMethodParameterDependencies)
    {
        return factoryMethodParameterDependencies.Any(d =>
            SymbolEqualityComparer.Default.Equals(d, constructorParameter.Type))
            ? DependencyKind.MethodParameter
            : DependencyKind.Ctor;
    }
}