using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Factory.Generator;

[Generator]
public class FactoryGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context.SyntaxProvider
            .CreateSyntaxProvider(
                (s, _) => s is ClassDeclarationSyntax or RecordDeclarationSyntax,
                (ctx, _) => ClassDeclarationForSourceGenService.Get(
                    ctx,
                    "Factory.Generator.Abstractions.GenerateFactoryAttribute"))
            .Where(t => t.reportAttributeFound)
            .Select((t, _) => t.Item1);

        context.RegisterSourceOutput(context.CompilationProvider.Combine(provider.Collect()),
            (ctx, t) => GenerateCode(ctx, t.Left, t.Right));
    }

    private static void GenerateCode(
        SourceProductionContext context,
        Compilation compilation,
        ImmutableArray<TypeDeclarationSyntax> classOrRecordDeclarations)
    {
        if (classOrRecordDeclarations.Length == 0)
            return;

        foreach (var classDeclarationSyntax in classOrRecordDeclarations)
        {
            var semanticModel = compilation.GetSemanticModel(classDeclarationSyntax.SyntaxTree);
            if (semanticModel.GetDeclaredSymbol(classDeclarationSyntax) is not INamedTypeSymbol classSymbol)
                continue;

            var namespaceName = classSymbol.ContainingNamespace.ToDisplayString();

            var className = classSymbol.Name;

            foreach (var attributeData in classSymbol.GetAttributes())
            {
                if (attributeData.AttributeClass == null)
                    continue;

                var attributeTypes = attributeData.AttributeClass.TypeArguments;

                var constructor = classSymbol.Constructors.FirstOrDefault();

                var factoryMethodParameterDependencies = attributeTypes.ToArray();

                var requiredParameterTypes = constructor?.Parameters.Select(p => p.Type).ToArray();
                var model = constructor?.Parameters
                    .Where(p => attributeTypes.All(at => !SymbolEqualityComparer.Default.Equals(at, p.Type)))
                    .Select((m, index) =>
                        new Dependency(DependencyKind.Ctor, ToDisplayString(m.Type), $"ctorParam{index}", m.Type))
                    .Concat(factoryMethodParameterDependencies.Select((m, index) =>
                        new Dependency(DependencyKind.MethodParameter, ToDisplayString(m), $"methParam{index}", m)))
                    .ToArray() ?? [];

                Render(context, className, namespaceName, model, requiredParameterTypes);
            }
        }
    }

    private static void Render(SourceProductionContext context,
        string className,
        string namespaceName,
        Dependency[] model,
        ITypeSymbol[]? requiredParameterTypes)
    {
        var methodParameterDependencies = model
            .Where(m => m.Kind == DependencyKind.MethodParameter).ToArray();

        var ctorDependencies = model.Where(m => m.Kind == DependencyKind.Ctor).ToArray();

        var iFactoryGenericArguments = methodParameterDependencies
            .Select(d => d.FullTypeName)
            .Append(className)
            .JoinToString();

        var fields = ctorDependencies
            .Select(m => $"private readonly {m.FullTypeName} {m.TokenName};")
            .JoinToString("\n    ");

        var factoryCtorParameters = ctorDependencies
            .Select(s => $"{s.FullTypeName} {s.TokenName}")
            .JoinToString();

        var factoryTypeName =
            $"{methodParameterDependencies.Select(c => c.RoslynType.Name).JoinToString("")}{className}Factory";

        var assignments = ctorDependencies
            .Select(m => $"this.{m.TokenName} = {m.TokenName};")
            .JoinToString("\n        ");

        var methodParameters = methodParameterDependencies
            .Select(m => $"{m.FullTypeName} {m.TokenName}")
            .JoinToString();

        var ctorParameters = CollectCtorParameters(requiredParameterTypes, model);

        var code =
            $$"""
              // <auto-generated/>

              using Factory.Generator.Abstractions;

              namespace {{namespaceName}};

              public sealed class {{factoryTypeName}} : IFactory<{{iFactoryGenericArguments}}>
              {
                  {{fields}}
              
                  public {{factoryTypeName}}({{factoryCtorParameters}})
                  {
                      {{assignments}}
                  }
              
                  public {{namespaceName}}.{{className}} Create({{methodParameters}})
                  {
                      return new {{namespaceName}}.{{className}}({{ctorParameters.JoinToString()}});
                  }
              }
              """;

        context.AddSource($"{namespaceName}.{factoryTypeName}.g.cs", SourceText.From(code, Encoding.UTF8));
    }

    private static IEnumerable<string> CollectCtorParameters(
        ITypeSymbol[]? constructorParameterTypes,
        Dependency[] model)
    {
        if (constructorParameterTypes != null)
            foreach (var typeSymbol in constructorParameterTypes)
            {
                var token = model.FirstOrDefault(x => SymbolEqualityComparer.Default.Equals(x.RoslynType, typeSymbol))
                    .TokenName;
                yield return token;
            }
    }

    private static string ToDisplayString(ITypeSymbol p)
    {
        return p.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
    }
}